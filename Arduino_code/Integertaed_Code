int LED_BUILTIN = 2;

//ultrasonic sensor
const int trigPin_1= 5;
const int echoPin_1= 19;

const int trigPin_2= 4;
const int echoPin_2= 18;

const int trigPin_3= 15;
const int echoPin_3= 21;

const int mid_distance_threshold_obstacle = 15;
const int mid_distance_threshold_staircase = 15;
const int mid_distance_threshold_pothole = 10;

//water sensor
const int moisture_sensor_pin = 34;
int moisture_sensor_value = 0;


//fire sensor
const int gas_sensor_pin = 35;
int gas_sensor_value = 0;



//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701
long duration1,duration2,duration3;
long distance1,distance2,distance3;
float distanceCm1,distanceCm2,distanceCm3;
float distanceInch1,distanceInch2,distanceInch3;

void setup() {
  Serial.begin(115200); // Starts the serial communication
  pinMode(trigPin_1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin_1, INPUT); // Sets the echoPin as an Input

  pinMode(trigPin_2, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin_2, INPUT); // Sets the echoPin as an Input

  pinMode(trigPin_3, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin_3, INPUT); // Sets the echoPin as an Input


  pinMode (LED_BUILTIN, OUTPUT);
}

void loop() {
  // Clears the trigPin_1
  digitalWrite(trigPin_1, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin_1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin_1, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration1= pulseIn(echoPin_1, HIGH);


    digitalWrite(trigPin_2, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin_2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin_2, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration2 = pulseIn(echoPin_2, HIGH);

    digitalWrite(trigPin_3, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin_3, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin_3, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration3 = pulseIn(echoPin_3, HIGH);

  
  // Calculate the distance
  distanceCm1 = duration1 * SOUND_SPEED/2;
  distanceCm2 = duration2 * SOUND_SPEED/2;
  distanceCm3 = duration3 * SOUND_SPEED/2;

  
  if(distanceCm1 < mid_distance_threshold_obstacle){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
  }
    if(distanceCm2 < mid_distance_threshold_staircase){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
  }
    if(distanceCm3 < mid_distance_threshold_pothole){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
  }
  
  // Convert to inches
  distanceInch1 = distanceCm1 * CM_TO_INCH;
  distanceInch2 = distanceCm2 * CM_TO_INCH;
  distanceInch3 = distanceCm3 * CM_TO_INCH;
      
  // Prints the distance in the Serial Monitor
  Serial.print("Distance1 (cm): ");
  Serial.println(distanceCm1);
  Serial.print("Distance1 (inch): ");
  Serial.println(distanceInch1);
       
  // Prints the distance in the Serial Monitor
  Serial.print("Distance2 (cm): ");
  Serial.println(distanceCm2);
  Serial.print("Distance2 (inch): ");
  Serial.println(distanceInch2);
        
  // Prints the distance in the Serial Monitor
  Serial.print("Distance3 (cm): ");
  Serial.println(distanceCm3);
  Serial.print("Distance3 (inch): ");
  Serial.println(distanceInch3); 
  delay(1000);





  //Water sensor
  moisture_sensor_value = analogRead(moisture_sensor_pin);
  Serial.print("water : ");
  Serial.println(moisture_sensor_value);
  delay(1000);

  if(moisture_sensor_value < 4000){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
  }



  //fire sensor
  gas_sensor_value = analogRead(gas_sensor_pin);
  Serial.print("Fire : ");
  Serial.println(gas_sensor_value);
  delay(1000);
  if(gas_sensor_value > 1000){
    digitalWrite(LED_BUILTIN, HIGH);
    delay(3000);
    digitalWrite(LED_BUILTIN, LOW);
    delay(1000);
  }


}
