void setup() {

  Serial.begin(115200); // Starts the serial communication
  logfile_setup();
  // configurations setup
  threshold_setup_log();




  pinMode(trigPin_1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin_1, INPUT); // Sets the echoPin as an Input
  pinMode(trigPin_2, OUTPUT);
  pinMode(echoPin_2, INPUT);
  pinMode(trigPin_3, OUTPUT);
  pinMode(echoPin_3, INPUT);
  pinMode (LED_BUILTIN, OUTPUT);
  pinMode(BUTTON, INPUT);
  digitalWrite(LED_BUILTIN, LOW);

  //----------------------- WIFI CONNECTING --------------------------------


  //--------------------- Configures static IP address ---------------------

  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
    Serial.println("STA Failed to configure");
  }








  WiFi.begin(  WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(2000);
    Serial.println("Connecting to WiFi..");
  }

  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got request");
    request->send_P(200, "text/html", index_html, processor);
  });


  //--------------------- value paasing -------------------------
  //  server.on("/get_obstacles", HTTP_GET, [](AsyncWebServerRequest * request) {
  //    Serial.println("Got request");
  //    request->send_P(200, "text/html", obstacles, obstacles_processor);
  //  });

  //--------------------- buzzer sounds -------------------------

  server.on("/on_buzzer", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got buzzer request ON");
    song_on();
    request->send_P(200, "text/html",  index_html, processor);
  });

  server.on("/off_buzzer", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got buzzer request OFF");
    song_off();
    //request->send_P(200, "text/html",  index_html, processor);
  });


  //--------------------- configuration settings ---------------------

  server.on("/set_config", HTTP_GET, [](AsyncWebServerRequest * request) {
    String song, detection, distance_str;
    int distance;


    if (request->hasParam("songId") && request->hasParam("songId")) {
      detection = request->getParam("detectionId")->value();
      song = request->getParam("songId")->value();
      distance_str = request->getParam("distanceId")->value();
    }

    Serial.println("\n------VALUES PASSED----------" );
    Serial.println("Detection : " + detection);
    Serial.println("Song      : " + song);
    Serial.println("Distance : " + distance_str);

    distance = distance_str.toInt();




    //-------------------DISTANCE CONFIGURATION------------------------

    if (detection.equals("Obstacle Detection")) {
      mid_distance_threshold_obstacle = distance;
      writeFileStr(SPIFFS, mdt_obstacle_file, String(distance));   //storage
    }

    if (detection == "Staircase Detection") {
      mid_distance_threshold_staircase = distance;
      writeFileStr(SPIFFS, mdt_staircase_file, String(distance));
    }
    if (detection == "Pothole Detection") {
      mid_distance_threshold_pothole = distance;
      writeFileStr(SPIFFS, mdt_pothole_file, String(distance));
    }
    if (detection == "Water Detection") {
      mid_distance_threshold_water = distance;
      writeFileStr(SPIFFS, mdt_water_file, String(distance));
    }
    if (detection == "Fire Detection") {
      mid_distance_threshold_fire = distance;
      writeFileStr(SPIFFS, mdt_fire_file, String(distance));
    }


    //--------------------SONG CALCULATIONS-------------------------
    if (song == "song1") {
      flag1 = 1, flag2 = 0, flag3 = 0, flag4 = 0, flag5 = 0;
    }
    if (song == "song2") {
      flag1 = 0, flag2 = 1, flag3 = 0, flag4 = 0, flag5 = 0;
    }
    if (song == "song3") {
      flag1 = 0, flag2 = 0, flag3 = 1, flag4 = 0, flag5 = 0;
    }
    if (song == "song4") {
      flag1 = 0, flag2 = 0, flag3 = 0, flag4 = 1, flag5 = 0;
    }
    if (song == "song5") {
      flag1 = 0, flag2 = 0, flag3 = 0, flag4 = 0, flag5 = 1;
    }

    request->send_P(200, "text/html",  "ok");
  });



  //--------------------- TELEGRAM configuration settings ---------------------

  server.on("/set_msg_config", HTTP_GET, [](AsyncWebServerRequest * request) {


    if (request->hasParam("Msg_Id") && request->hasParam("Msg_Id")) {
      n = request->getParam("Name_Id")->value();
      msg = request->getParam("Msg_Id")->value();
      num_str = request->getParam("Num_Id")->value();
    }

    Serial.println("\n----------- VALUES PASSED ------------" );
    Serial.println("Name       : " + n);
    Serial.println("Message    : " + msg);
    Serial.println("TelegramId : " + num_str);

    num = num_str.toInt();

    request->send_P(200, "text/html",  "ok");
  });



  //--------------------- TELEGRAM MSG ---------------------------
  Serial.print("Retrieving time: ");
  configTime(0, 0, "pool.ntp.org"); // get UTC time via NTP
  time_t now = time(nullptr);
  Serial.println(now);
  bot.sendMessage(CHAT_ID_Tele, "Succesfully Connected", "");


  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  server.begin();
}
