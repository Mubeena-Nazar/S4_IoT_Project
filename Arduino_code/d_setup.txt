void setup() {

  Serial.begin(115200); // Starts the serial communication
  logfile_setup();
  // configurations setup
  threshold_setup_log();




  pinMode(trigPin_1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin_1, INPUT); // Sets the echoPin as an Input
  pinMode(trigPin_2, OUTPUT);
  pinMode(echoPin_2, INPUT);
  pinMode(trigPin_3, OUTPUT);
  pinMode(echoPin_3, INPUT);
  pinMode (LED_BUILTIN, OUTPUT);
  pinMode(BUTTON, INPUT);
  digitalWrite(LED_BUILTIN, LOW);




//--------------------- Configures static IP address ---------------------
//
//  if (!WiFi.config(local_IP, gateway, subnet, primaryDNS, secondaryDNS)) {
//    Serial.println("STA Failed to configure");
//  }


//-------------------------- WIFI CONNECTING ------------------------------

  WiFi.begin(  WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(2000);
    Serial.println("Connecting to WiFi..");
  }

  Serial.println(WiFi.localIP());

  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got request");
    request->send_P(200, "text/html", index_html, processor);
  });


//------------------------------- buzzer sounds -----------------------------

  server.on("/on_buzzer", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got buzzer request ON");
    song_on();
    request->send_P(200, "text/html",  index_html, processor);
  });

  server.on("/off_buzzer", HTTP_GET, [](AsyncWebServerRequest * request) {
    Serial.println("Got buzzer request OFF");
    song_off();
    //request->send_P(200, "text/html",  index_html, processor);
  });
